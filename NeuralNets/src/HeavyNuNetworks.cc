#include "HeavyNu/NeuralNets/interface/HeavyNuNetworks.h"

extern "C" {
  int heavyNuNN_1000_100(float* in, float* out, int init);
  int heavyNuNN_1000_200(float* in, float* out, int init);
  int heavyNuNN_1000_300(float* in, float* out, int init);
  int heavyNuNN_1000_500(float* in, float* out, int init);
  int heavyNuNN_1000_700(float* in, float* out, int init);
  int heavyNuNN_1000_800(float* in, float* out, int init);
  int heavyNuNN_1000_900(float* in, float* out, int init);
  int heavyNuNN_1100_1000(float* in, float* out, int init);
  int heavyNuNN_1100_100(float* in, float* out, int init);
  int heavyNuNN_1100_200(float* in, float* out, int init);
  int heavyNuNN_1100_400(float* in, float* out, int init);
  int heavyNuNN_1100_600(float* in, float* out, int init);
  int heavyNuNN_1100_800(float* in, float* out, int init);
  int heavyNuNN_1100_900(float* in, float* out, int init);
  int heavyNuNN_1200_1000(float* in, float* out, int init);
  int heavyNuNN_1200_100(float* in, float* out, int init);
  int heavyNuNN_1200_1100(float* in, float* out, int init);
  int heavyNuNN_1200_200(float* in, float* out, int init);
  int heavyNuNN_1200_300(float* in, float* out, int init);
  int heavyNuNN_1200_500(float* in, float* out, int init);
  int heavyNuNN_1200_700(float* in, float* out, int init);
  int heavyNuNN_1200_900(float* in, float* out, int init);
  int heavyNuNN_1300_1000(float* in, float* out, int init);
  int heavyNuNN_1300_100(float* in, float* out, int init);
  int heavyNuNN_1300_1100(float* in, float* out, int init);
  int heavyNuNN_1300_1200(float* in, float* out, int init);
  int heavyNuNN_1300_200(float* in, float* out, int init);
  int heavyNuNN_1300_400(float* in, float* out, int init);
  int heavyNuNN_1300_600(float* in, float* out, int init);
  int heavyNuNN_1300_800(float* in, float* out, int init);
  int heavyNuNN_1400_100(float* in, float* out, int init);
  int heavyNuNN_1400_1100(float* in, float* out, int init);
  int heavyNuNN_1400_1200(float* in, float* out, int init);
  int heavyNuNN_1400_1300(float* in, float* out, int init);
  int heavyNuNN_1400_200(float* in, float* out, int init);
  int heavyNuNN_1400_300(float* in, float* out, int init);
  int heavyNuNN_1400_500(float* in, float* out, int init);
  int heavyNuNN_1400_700(float* in, float* out, int init);
  int heavyNuNN_1400_900(float* in, float* out, int init);
  int heavyNuNN_1500_1000(float* in, float* out, int init);
  int heavyNuNN_1500_100(float* in, float* out, int init);
  int heavyNuNN_1500_1200(float* in, float* out, int init);
  int heavyNuNN_1500_1300(float* in, float* out, int init);
  int heavyNuNN_1500_1400(float* in, float* out, int init);
  int heavyNuNN_1500_200(float* in, float* out, int init);
  int heavyNuNN_1500_400(float* in, float* out, int init);
  int heavyNuNN_1500_600(float* in, float* out, int init);
  int heavyNuNN_1500_800(float* in, float* out, int init);
  int heavyNuNN_1600_100(float* in, float* out, int init);
  int heavyNuNN_1600_1100(float* in, float* out, int init);
  int heavyNuNN_1600_1300(float* in, float* out, int init);
  int heavyNuNN_1600_1400(float* in, float* out, int init);
  int heavyNuNN_1600_1500(float* in, float* out, int init);
  int heavyNuNN_1600_200(float* in, float* out, int init);
  int heavyNuNN_1600_300(float* in, float* out, int init);
  int heavyNuNN_1600_500(float* in, float* out, int init);
  int heavyNuNN_1600_700(float* in, float* out, int init);
  int heavyNuNN_1600_900(float* in, float* out, int init);
}

float HeavyNuNetworks::evaluate(int mw, int mnu, const std::vector<float>& invalstd) {
    float retval=-1000.0f;
    float inval[2]; 
    inval[0]=invalstd[0];    inval[1]=invalstd[1];
    
  if (mw==1000 && mnu==100) heavyNuNN_1000_100(inval, &retval, 0);
  else if (mw==1000 && mnu==200) heavyNuNN_1000_200(inval, &retval, 0);
  else if (mw==1000 && mnu==300) heavyNuNN_1000_300(inval, &retval, 0);
  else if (mw==1000 && mnu==500) heavyNuNN_1000_500(inval, &retval, 0);
  else if (mw==1000 && mnu==700) heavyNuNN_1000_700(inval, &retval, 0);
  else if (mw==1000 && mnu==800) heavyNuNN_1000_800(inval, &retval, 0);
  else if (mw==1000 && mnu==900) heavyNuNN_1000_900(inval, &retval, 0);
  else if (mw==1100 && mnu==1000) heavyNuNN_1100_1000(inval, &retval, 0);
  else if (mw==1100 && mnu==100) heavyNuNN_1100_100(inval, &retval, 0);
  else if (mw==1100 && mnu==200) heavyNuNN_1100_200(inval, &retval, 0);
  else if (mw==1100 && mnu==400) heavyNuNN_1100_400(inval, &retval, 0);
  else if (mw==1100 && mnu==600) heavyNuNN_1100_600(inval, &retval, 0);
  else if (mw==1100 && mnu==800) heavyNuNN_1100_800(inval, &retval, 0);
  else if (mw==1100 && mnu==900) heavyNuNN_1100_900(inval, &retval, 0);
  else if (mw==1200 && mnu==1000) heavyNuNN_1200_1000(inval, &retval, 0);
  else if (mw==1200 && mnu==100) heavyNuNN_1200_100(inval, &retval, 0);
  else if (mw==1200 && mnu==1100) heavyNuNN_1200_1100(inval, &retval, 0);
  else if (mw==1200 && mnu==200) heavyNuNN_1200_200(inval, &retval, 0);
  else if (mw==1200 && mnu==300) heavyNuNN_1200_300(inval, &retval, 0);
  else if (mw==1200 && mnu==500) heavyNuNN_1200_500(inval, &retval, 0);
  else if (mw==1200 && mnu==700) heavyNuNN_1200_700(inval, &retval, 0);
  else if (mw==1200 && mnu==900) heavyNuNN_1200_900(inval, &retval, 0);
  else if (mw==1300 && mnu==1000) heavyNuNN_1300_1000(inval, &retval, 0);
  else if (mw==1300 && mnu==100) heavyNuNN_1300_100(inval, &retval, 0);
  else if (mw==1300 && mnu==1100) heavyNuNN_1300_1100(inval, &retval, 0);
  else if (mw==1300 && mnu==1200) heavyNuNN_1300_1200(inval, &retval, 0);
  else if (mw==1300 && mnu==200) heavyNuNN_1300_200(inval, &retval, 0);
  else if (mw==1300 && mnu==400) heavyNuNN_1300_400(inval, &retval, 0);
  else if (mw==1300 && mnu==600) heavyNuNN_1300_600(inval, &retval, 0);
  else if (mw==1300 && mnu==800) heavyNuNN_1300_800(inval, &retval, 0);
  else if (mw==1400 && mnu==100) heavyNuNN_1400_100(inval, &retval, 0);
  else if (mw==1400 && mnu==1100) heavyNuNN_1400_1100(inval, &retval, 0);
  else if (mw==1400 && mnu==1200) heavyNuNN_1400_1200(inval, &retval, 0);
  else if (mw==1400 && mnu==1300) heavyNuNN_1400_1300(inval, &retval, 0);
  else if (mw==1400 && mnu==200) heavyNuNN_1400_200(inval, &retval, 0);
  else if (mw==1400 && mnu==300) heavyNuNN_1400_300(inval, &retval, 0);
  else if (mw==1400 && mnu==500) heavyNuNN_1400_500(inval, &retval, 0);
  else if (mw==1400 && mnu==700) heavyNuNN_1400_700(inval, &retval, 0);
  else if (mw==1400 && mnu==900) heavyNuNN_1400_900(inval, &retval, 0);
  else if (mw==1500 && mnu==1000) heavyNuNN_1500_1000(inval, &retval, 0);
  else if (mw==1500 && mnu==100) heavyNuNN_1500_100(inval, &retval, 0);
  else if (mw==1500 && mnu==1200) heavyNuNN_1500_1200(inval, &retval, 0);
  else if (mw==1500 && mnu==1300) heavyNuNN_1500_1300(inval, &retval, 0);
  else if (mw==1500 && mnu==1400) heavyNuNN_1500_1400(inval, &retval, 0);
  else if (mw==1500 && mnu==200) heavyNuNN_1500_200(inval, &retval, 0);
  else if (mw==1500 && mnu==400) heavyNuNN_1500_400(inval, &retval, 0);
  else if (mw==1500 && mnu==600) heavyNuNN_1500_600(inval, &retval, 0);
  else if (mw==1500 && mnu==800) heavyNuNN_1500_800(inval, &retval, 0);
  else if (mw==1600 && mnu==100) heavyNuNN_1600_100(inval, &retval, 0);
  else if (mw==1600 && mnu==1100) heavyNuNN_1600_1100(inval, &retval, 0);
  else if (mw==1600 && mnu==1300) heavyNuNN_1600_1300(inval, &retval, 0);
  else if (mw==1600 && mnu==1400) heavyNuNN_1600_1400(inval, &retval, 0);
  else if (mw==1600 && mnu==1500) heavyNuNN_1600_1500(inval, &retval, 0);
  else if (mw==1600 && mnu==200) heavyNuNN_1600_200(inval, &retval, 0);
  else if (mw==1600 && mnu==300) heavyNuNN_1600_300(inval, &retval, 0);
  else if (mw==1600 && mnu==500) heavyNuNN_1600_500(inval, &retval, 0);
  else if (mw==1600 && mnu==700) heavyNuNN_1600_700(inval, &retval, 0);
  else if (mw==1600 && mnu==900) heavyNuNN_1600_900(inval, &retval, 0);
  return retval;
}

std::vector<std::pair<int,int> > HeavyNuNetworks::getMassPoints() 
{
  std::vector<std::pair<int,int> > retvec;
    
  retvec.push_back(std::pair<int,int>(1000,100));
  retvec.push_back(std::pair<int,int>(1000,200));
  retvec.push_back(std::pair<int,int>(1000,300));
  retvec.push_back(std::pair<int,int>(1000,500));
  retvec.push_back(std::pair<int,int>(1000,700));
  retvec.push_back(std::pair<int,int>(1000,800));
  retvec.push_back(std::pair<int,int>(1000,900));
  retvec.push_back(std::pair<int,int>(1100,1000));
  retvec.push_back(std::pair<int,int>(1100,100));
  retvec.push_back(std::pair<int,int>(1100,200));
  retvec.push_back(std::pair<int,int>(1100,400));
  retvec.push_back(std::pair<int,int>(1100,600));
  retvec.push_back(std::pair<int,int>(1100,800));
  retvec.push_back(std::pair<int,int>(1100,900));
  retvec.push_back(std::pair<int,int>(1200,1000));
  retvec.push_back(std::pair<int,int>(1200,100));
  retvec.push_back(std::pair<int,int>(1200,1100));
  retvec.push_back(std::pair<int,int>(1200,200));
  retvec.push_back(std::pair<int,int>(1200,300));
  retvec.push_back(std::pair<int,int>(1200,500));
  retvec.push_back(std::pair<int,int>(1200,700));
  retvec.push_back(std::pair<int,int>(1200,900));
  retvec.push_back(std::pair<int,int>(1300,1000));
  retvec.push_back(std::pair<int,int>(1300,100));
  retvec.push_back(std::pair<int,int>(1300,1100));
  retvec.push_back(std::pair<int,int>(1300,1200));
  retvec.push_back(std::pair<int,int>(1300,200));
  retvec.push_back(std::pair<int,int>(1300,400));
  retvec.push_back(std::pair<int,int>(1300,600));
  retvec.push_back(std::pair<int,int>(1300,800));
  retvec.push_back(std::pair<int,int>(1400,100));
  retvec.push_back(std::pair<int,int>(1400,1100));
  retvec.push_back(std::pair<int,int>(1400,1200));
  retvec.push_back(std::pair<int,int>(1400,1300));
  retvec.push_back(std::pair<int,int>(1400,200));
  retvec.push_back(std::pair<int,int>(1400,300));
  retvec.push_back(std::pair<int,int>(1400,500));
  retvec.push_back(std::pair<int,int>(1400,700));
  retvec.push_back(std::pair<int,int>(1400,900));
  retvec.push_back(std::pair<int,int>(1500,1000));
  retvec.push_back(std::pair<int,int>(1500,100));
  retvec.push_back(std::pair<int,int>(1500,1200));
  retvec.push_back(std::pair<int,int>(1500,1300));
  retvec.push_back(std::pair<int,int>(1500,1400));
  retvec.push_back(std::pair<int,int>(1500,200));
  retvec.push_back(std::pair<int,int>(1500,400));
  retvec.push_back(std::pair<int,int>(1500,600));
  retvec.push_back(std::pair<int,int>(1500,800));
  retvec.push_back(std::pair<int,int>(1600,100));
  retvec.push_back(std::pair<int,int>(1600,1100));
  retvec.push_back(std::pair<int,int>(1600,1300));
  retvec.push_back(std::pair<int,int>(1600,1400));
  retvec.push_back(std::pair<int,int>(1600,1500));
  retvec.push_back(std::pair<int,int>(1600,200));
  retvec.push_back(std::pair<int,int>(1600,300));
  retvec.push_back(std::pair<int,int>(1600,500));
  retvec.push_back(std::pair<int,int>(1600,700));
  retvec.push_back(std::pair<int,int>(1600,900));
  return retvec;
}
